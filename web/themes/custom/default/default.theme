<?php

/**
 * @file
 * Contains theme hooks.
 */

use Drupal\Core\Site\Settings;

/**
 * Implements hook_library_info_alter().
 *
 * @phpstan-param array<mixed> $libraries
 */
function default_library_info_alter(array &$libraries, string $extension): void {
  $viteSettings = Settings::get('vite', []);
  $useDevServer = !empty($viteSettings['useDevServer']);

  if ($extension !== 'default') {
    return;
  }

  if (FALSE === $useDevServer) {
    $libraries['global']['css']['component']['src/main.css'] = [
      'attributes' => [
        'vite' => TRUE,
      ],
    ];

    \Drupal::service('vite.vite')->processLibraries($libraries, $extension);
    return;
  }

  $devServerUrl = $viteSettings['overrides']['default']['devServerUrl'];

  /*
   * Make the vite-plugin-checker plugin work with HMR.
   * @see https://vite-plugin-checker.netlify.app/faq/integration.html
   */
  $vitePluginCheckerUrl = $devServerUrl . '/@vite-plugin-checker-runtime-entry';
  $libraries['global']['js'][$vitePluginCheckerUrl] = [
    'type' => 'external',
    'attributes' => [
      'vite' => FALSE,
      'type' => 'module',
    ],
  ];

  /*
   * Make the Drupal template HMR plugin work on backend application.
   * @see https://www.npmjs.com/package/vite-plugin-drupal-template-hmr
   */
  $vitePluginCheckerUrl = $devServerUrl . '/@vite-plugin-drupal-template-hmr';
  $libraries['global']['js'][$vitePluginCheckerUrl] = [
    'type' => 'external',
    'attributes' => [
      'vite' => FALSE,
      'type' => 'module',
    ],
  ];

  /*
   * Add the browsersync script.
   * @see https://browsersync.io/
   */
  $libraries['global']['js']['browsersync/script.js'] = [];
}


 /**
 * Implements hook_theme_suggestions_node_alter().
 *
 * @phpstan-param array<mixed> $suggestions
 * @phpstan-param array<mixed> $variables
 * @return array
 */
function default_theme_suggestions_node_alter(array &$suggestions, array $variables): void {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function default_theme_suggestions_page_alter(array &$suggestions, array $variables): void {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}


/**
* Implements hook_preprocess_HOOK() for menu.html.twig.
*/
function default_preprocess_node__recipe(&$variables) {
  // Allow the Attribute Class to deal with adding a css class to this element.
  $variables['attributes']['class'][] = 'my-menu';
}


/**
* Implements hook_preprocess_HOOK() for menu.html.twig.
*/
function default_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main') {
    $variables['attributes']['class'][] = 'my-main-menu';
  }
}



function default_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['foo_example'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Widget'),
    '#default_value' => theme_get_setting('foo_example', 'default'),
    '#description'   => t("Place this text in the widget spot on your site."),
  );
}
